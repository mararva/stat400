# Chapter 5: Control Flow

-   What is the difference between if, else, else if, ifelse, case_when, and switch?

    -   if, else, and elseif deal with single values, while ifelse can be used with vectors. case_when can accept more vectors as inputs than ifelse, and switch is a more compact form of writing if-else statements.

-   When might you use each? What happens if you give an if statement a vector of TRUE and FALSE?

    -   if, else, and elseif should be used for checking atomic values. ifelse can be used to check simple vectors, case_when can be used for more complicated cases with vectors, and switch can be used in place of case_when.

-   What is a situation where a while loop might be more useful than a for loop?

    -   If you don't know how many repetitions it takes for a condition to be met, use while.

-   What is the difference between next, break, and print inside a loop?

    -   next: skips the current iteration

    -   break: skips the entire loop

    -   print: prints a vector

-   What are good alternatives to using a for loop? When might these not be sufficient or desirable?

    -   while and repeat are alternatives to a for loop, but they are not applicable to all use cases. Generally, the least flexible option should be used, and while and repeat are more general than for.

# Chapter 6: Functions

-   What are the formals, body, and enviroment of a function?
    -   formals: the list of arguments that control how you call a function
    -   body: the code inside the function
    -   environment: the data structure of the function
-   What is a primitive function?
    -   Primitive functions are implemented purely in C.
-   What is lexical scoping? What does this mean about using the same names for objects inside and outside of functions?
    -   Functions that automatically quote one or more arguments can override the default scoping rules to implement other varieties of scoping.
-   What do we mean by R having "first-class functions"? Why is this useful?
    -   R functions are also objects. This is useful because they, like any other object can be used by other objects.
-   If you pass in an R code expression as an argument to a function, when does the code get evaluated?
    -   The code gets evaluated when the variable representing the argument gets called in the function's code.
-   How is & different from &&?
    -   & is vectorized, so it can take and return vectors, unlike && which only takes single numbers.
-   What is "passing the dots" and why might it be useful?
    -   Passing the dots allows the function to take any amount of arguments. This is useful for passing arguments between functions.
-   What are the four types of functions, and how are they different?
    -   **prefix**: the function name comes before its arguments
    -   **infix**: the function name comes in between its arguments
    -   **replacement**: functions that replace values by assignment
    -   **special**: functions that don't fit in the above categories

# Chapter 7: Environments

-   An environment is essentially a list of objects. What is special about an environment that makes it more than just a list?
    -   Every name must be unique.
    -   The names in an environment are not ordered.
    -   An environment has a parent.
    -   Environments are not copied when modified.
-   What is dynamic scoping? What consequences does this have for creating functions?
    -   Dynamic scoping is looking up variables in the calling stack rather than in the enclosing environment. This makes functions harder to write because it makes them more context-specific.
-   What is the difference between a package environment and a namespace environment? Why is it important that these are different?
    -   The package environment is the external interface for a function, while the namespace environment is the internal interface. These are important because some values in the namespace environment shouldn't be shared the the package environment.
-   What is the difference between a function environment and an execution environment? Why is it important that these are different?
    -   Function environments bind the environment that calls the function, while execution environments are only created for a single execution of a function and are removed afterwards. These must be different because function outputs differ from one execution to another but the function calls must stay the same.

# Chapter 8: Conditions

-   Give an example of when you might use an error vs a warning vs a message when designing a function.

    -   An error would be used if the inputs given are outside the bounds of the function and would break the execution if it ran. Warnings are for when the function runs but there are minor errors with the inputs.

-   Why might you want to use try() inside your function? When might you prefer to use tryCatch() or withCallingHandlers() instead?

    -   try is useful for when you want to ignore an error. tryCatch is best for when you want code to run when an error is thrown, and withCallingHandlers is better when dealing with non errors.
