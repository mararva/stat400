---
editor: 
  markdown: 
    wrap: sentence
---

# **Chapter 10: Function Factories**

-   Activity: Create your own example of a "must be forced" situation like in 10.2.3.

    ```{r}
    power1 <- function(exp) {
      function(x) {
        x ^ exp
      }
    }

    square <- power1(2)
    cube <- power1(3)

    x <- 2
    cube <- power1(x)
    x <- 3
    cube(2)
    #> [1] 4
    ```

-   Discussion: Exercises 2,3,5,6

    -   Exercise 5: The \<\<- will push the value of i in the function to the global variable i.

        ```{r}
        i <- 5
        new_counter3 <- function() {
          i <- 0
          i <<- i
          function() {
            i <<- i + 1
            i
          }
        }
        fn <- new_counter3()()
        ```

-   Scavenger hunt: Find the source code in ggplot where binwidth is used as a function.
    This is hard!
    Try it for 5-10 minutes, then ping me for a hint.
    Why are function factories particularly useful for random processes, like bootstrapping?\

# **Chapter 11: Function Operators**

-   Discussion: Vectorize() function

    -   This function vectorizes, or turns into a vector, its contents.

-   Activity: (Ex 4) Write a function operator that logs a timestamp and message to a file every time a function is run.

    ```{r}
    messagelog <- function(f) {
      logfile <- "log.txt"
      timestamp <- Sys.time()
      print(timestamp)
      cat(paste(timestamp, "-", message, "\n"), file = logfile, append = TRUE)
    }
    ```
