install.packages("lobstr")
x_ok <- function(x) {
!is.null(x) && length(x) == 1 && x > 0
}
x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
x_ok <- function(x) {
!is.null(x) & length(x) == 1 && x > 0
}
x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
x_ok <- function(x) {
!is.null(x) && length(x) == 1 && x > 0
}
x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
x_ok <- function(x) {
!is.null(x) & length(x) == 1 && x > 0
}
x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
x_ok <- function(x) {
!is.null(x) & length(x) == 1 & x > 0
}
x_ok <- function(x) {
!is.null(x) & length(x) == 1 && x > 0
}
x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
x_ok <- function(x) {
!is.null(x) & length(x) == 1 & x > 0
}
x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
power2 <- function(exp) {
force(exp)
function(x) {
x ^ exp
}
}
x <- 2
square <- power2(x)
x <- 3
square(2)
#> [1] 4
x <- 2
square <- power1(x)
power1 <- function(exp) {
function(x) {
x ^ exp
}
}
square <- power1(2)
cube <- power1(3)
x <- 2
square <- power1(x)
x <- 3
square(2)
#> [1] 4
power1 <- function(exp) {
function(x) {
x ^ exp
}
}
square <- power1(2)
cube <- power1(3)
x <- 2
cube <- power1(x)
x <- 3
cube(2)
#> [1] 4
new_counter3 <<- function() {
i <- 0
function() {
i <- i + 1
i
}
}
new_counter3()
i <- 5
new_counter3 <- function() {
i <- 0
function() {
i <- i + 1
i
}
}
new_counter3()()
i
i <- 5
new_counter3 <<- function() {
i <- 0
function() {
i <- i + 1
i
}
}
new_counter3()()
new_counter3()()
new_counter3 <<- function() {
i <- 0
function() {
i <<- i + 1
i
}
}
new_counter3()()
new_counter3 <<- function() {
i <- 0
i <<- i
function() {
i <<- i + 1
i
}
}
fn <- new_counter3()
fn
fn()
new_counter3 <<- function() {
i <- 0
i <<- i
function() {
i <<- i + 1
i
}
}
new_counter3 <- function() {
i <- 0
i <<- i
function() {
i <<- i + 1
i
}
}
fn()
fn()
fn()
fn()
fn()
fn()
new_counter3()()
new_counter3()()
new_counter3()()
messagelog <- function(f) {
print(Sys.time())
}
messagelog()
messagelog()
messagelog()
messagelog <- function(f) {
logfile <- "log.txt"
print(Sys.time())
result <- f()
cat(paste(timestamp, "-", message, "\n"), file = logfile, append = TRUE)
return(result)
}
messagelog()
messagelog <- function(f) {
logfile <- "log.txt"
print(Sys.time())
result <- f()
cat(paste(timestamp, "-", message, "\n"), file = logfile, append = TRUE)
}
messagelog()
messagelog <- function(f=sqrt()) {
logfile <- "log.txt"
print(Sys.time())
result <- f()
cat(paste(timestamp, "-", message, "\n"), file = logfile, append = TRUE)
}
messagelog()
messagelog <- function(f=sqrt(4)) {
logfile <- "log.txt"
print(Sys.time())
result <- f()
cat(paste(timestamp, "-", message, "\n"), file = logfile, append = TRUE)
}
messagelog()
messagelog <- function(f) {
logfile <- "log.txt"
print(Sys.time())
cat(paste(timestamp, "-", message, "\n"), file = logfile, append = TRUE)
messagelog()
messagelog()
messagelog <- function(f) {
logfile <- "log.txt"
timestamp <- Sys.time()
print(timestamp)
cat(paste(timestamp, "-", message, "\n"), file = logfile, append = TRUE)
}
messagelog()
x <- 1:10
call2(median, x, na.rm = TRUE)
source("C:/Users/ryan2/Documents/Github/stat400/Exercises/week7/notes.R")
library(dplyr)
library(ggplot2)
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
f1 <- function(x, y) {
exprs(x = x, y = y)
}
f1 <- function(x, y) {
exprs(x = x, y = y)
}
f2 <- function(x, y) {
enexprs(x = x, y = y)
}
f1(a + b, c + d)
f2(a + b, c + d)
expr(x = x, y = y)
f1 <- function(x, y) {
expr(x = x, y = y)
}
f2 <- function(x, y) {
enexprs(x = x, y = y)
}
f1(a + b, c + d)
f2(a + b, c + d)
f1 <- function(x, y) {
exprs(x = x, y = y)
}
f2 <- function(x, y) {
enexprs(x = x, y = y)
}
f1(a + b, c + d)
f2(a + b, c + d)
library(rlang)
f1 <- function(x, y) {
exprs(x = x, y = y)
}
f1(a + b, c + d)
library(stringi)
str_indent <- function(x, indent_level = 0, indent_character = ' ') {
indent <- paste(rep(indent_character, indent_level), collapse = '')
stringi::stri_replace_all_regex(x, '(?m)^', indent)
}
example_text <- paste(month.abb[1:3], collapse = '\n')
cat(str_indent(example_text, 3))
cat(str_indent(example_text, 3, '.'))
str_indent <- function(x, indent_level = 0, indent_character = ' ') {
indent <- paste(rep(indent_character, indent_level), collapse = '')
gsub("(?m)^", indent, x, perl = TRUE)
}
example_text <- paste(month.abb[1:3], collapse = '\n')
cat(str_indent(example_text, 3))
cat(str_indent(example_text, 3, '.'))
gsub("(?m)^", indent, x, perl = FALSE)
str_indent <- function(x, indent_level = 0, indent_character = ' ') {
indent <- paste(rep(indent_character, indent_level), collapse = '')
gsub("(?m)^", indent, x, perl = FALSE)
}
example_text <- paste(month.abb[1:3], collapse = '\n')
cat(str_indent(example_text, 3))
cat(str_indent(example_text, 3, '.'))
if (split_acronyms) {
# This function ads a space wherever a lowercase letter
# is followed by an uppercase letter, with modifiable
# functionality for acronyms.
str_split_camel <- function(x, split_acronyms = FALSE) {
if (split_acronyms) {
# Splits at lowercase-uppercase and between two uppercase letters followed by lowercase
str_replace_all(x, "(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])", " ")
} else {
# Splits only at lowercase-uppercase
str_replace_all(x, "(?<=[a-z])(?=[A-Z])", " ")
}
}
# This function ads a space wherever a lowercase letter
# is followed by an uppercase letter, with modifiable
# functionality for acronyms.
str_spaceout <- function(x, split_acronyms = FALSE) {
if (split_acronyms) {
# Splits at lowercase-uppercase and between two uppercase letters followed by lowercase
str_replace_all(x, "(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])", " ")
} else {
# Splits only at lowercase-uppercase
str_replace_all(x, "(?<=[a-z])(?=[A-Z])", " ")
}
}
}
input <- "XMLHTTPRequestAndHTMLParser"
# Default splitting
str_spaceout(input, split_style = "default")
source("C:/Users/ryan2/Documents/Github/stat400/Project/spaceout.R")
input <- "XMLHTTPRequestAndHTMLParser"
# Default splitting
str_spaceout(input, split_style = "default")
source("C:/Users/ryan2/Documents/Github/stat400/Project/spaceout.R")
str_spaceout(input, split_style = "default")
library(stringr)
str_spaceout(input, split_style = "default")
input <- "XMLHTTPRequestAndHTMLParser"
# Default splitting
str_spaceout(input, split_style = "default")
# Output: "XMLHTTPRequest And HTML Parser"
# Split acronyms
str_spaceout(input, split_style = "acronyms")
# Output: "XML HTTP Request And HTML Parser"
# Split all consecutive uppercase letters
str_spaceout(input, split_style = "allcaps")
# Output: "X M L H T T P Request And H T M L Parser"
# Split every character
str_spaceout(input, split_style = "everything")
# Output: "X M L H T T P R e q u e s t A n d H T M L P a r s e r"
# Splits at lowercase-uppercase and between two uppercase letters followed by lowercase
str_replace_all(x, "(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])", " ")
str_spaceout <- function(x, split_style = "default") {
if (split_style == "acronyms") {
# Splits at lowercase-uppercase and between two uppercase letters followed by lowercase
str_replace_all(x, "(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])", " ")
} else if (split_style == "allcaps") {
# Splits between all consecutive uppercase letters
str_replace_all(x, "(?<=\\p{Lu})(?=\\p{Lu})", " ")
} else if (split_style == "default") {
# Splits only when a lowercase letter is succeeded by an uppercase letter
str_replace_all(x, "(?<=[a-z])(?=[A-Z])", " ")
} else if (split_style == "everything") {
# Splits between every character
str_replace_all(x, "(?<=.)(?=.)", " ")
} else {
stop("Invalid split_style. Choose from 'default', 'acronyms', 'allcaps', or 'everything'.")
}
}
str_spaceout(input, split_style = "acronyms")
str_spaceout(input)
source("C:/Users/ryan2/Documents/Github/stat400/Project/spaceout.R")
str_spaceout(input)
